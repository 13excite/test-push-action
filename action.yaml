name: 'Build and push image'
description: 'Build image from a Dockerfile, push it to the registry'
inputs:
  service:
    description: 'service name'
    required: true
    default: 'service'
  token:
    description: 'github token'
    required: true
  registry_secret:
    description: 'registry secret'
    required: true
  dockerfile:
    description: 'dockerfile to use'
    required: false
    default: './Dockerfile'
  context:
    description: 'docker build context directory'
    required: false
    default: '.'
  main_branch:
    description: 'main branch name'
    required: false
    default: 'main'
  webhook_url:
    description: 'slack webhook URL (optional)'
    required: false
    default: ''
  is_release:
    description: 'is final release created?'
    required: false
    default: false
  image_path:
    description: "Path to image like myhost.dev/project_name/service_type/"
    required: true
    default: ''
  registry_url:
    description: "gcp docker registry"
    required: false
    default: 'europe-west3-docker.pkg.dev'
runs:
  using: "composite"
  steps:
    - name: Check out the repo
      uses: actions/checkout@v2
      with:
        submodules: true
        token: ${{ inputs.token }}

    - name: Login to GCR
      uses: docker/login-action@v1.13.0
      with:
        registry: ${{ inputs.registry_url }}
        username: _json_key
        logout: false
        password: ${{ inputs.registry_secret }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ${{ inputs.image_path }}/${{ inputs.service }}
        tags: |
          type=sha,prefix=build-
          type=semver,pattern={{version}},enable=${{ inputs.is_release }}
          type=raw,value=release,enable=${{ inputs.is_release }}
          type=ref,event=branch

    - name: Push to image registry (build-id)
      uses: docker/build-push-action@v2
      with:
        push: true
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        tags: ${{ steps.meta.outputs.tags }}
        secrets: |
          "github_token=${{ inputs.token }}"
        build-args: |
          "BINARY_NAME=${{ inputs.service }}"
